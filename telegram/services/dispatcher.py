import asyncio

from aiogram import Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, CallbackQuery

from notification.models import Notification
from user.models import User

dispatcher = Dispatcher()


start_text = '''<b>–ü—Ä–∏–≤–µ—Ç!</b>

–í–ø–µ—Ä–µ–¥–∏ —Ç–µ–±—è –∂–¥—ë—Ç —Ç—É—Ä–Ω–∏—Ä –ø–æ –ø–æ–∫–µ—Ä—É —Å –ø—Ä–∏–∑–æ–≤—ã–º —Ñ–æ–Ω–¥–æ–º:
 
<b>5.000 —Ä—É–±.</b>

–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–º–∏ <b>üî• –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üî•!</b>
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞, –∂–º–∏ <b>üìö –ü—Ä–∞–≤–∏–ª–∞ üìö</b>

–ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è —è –ø—Ä–∏—à–ª—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç—É—Ä–Ω–∏—Ä—É, —á—Ç–æ, –≥–¥–µ –∏ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å...
'''

rules_text = '''üìö –ü—Ä–∞–≤–∏–ª–∞ üìö

1. –í—Ö–æ–¥ - 0 —Ä—É–±. (–ò–≥—Ä–∞–µ–º –Ω–∞ –¥–µ–Ω—å–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏)
2. –ö–∞–∂–¥—ã–µ 12 –º–∏–Ω—É—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ –±–ª–∞–π–Ω–¥–æ–≤ –≤ 2 —Ä–∞–∑–∞ (–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏)
3. –ù–∞—á–∞–ª—å–Ω—ã–µ –±–ª–∞–π–Ω–¥—ã 10/20
4. –ò–≥—Ä–∞–µ–º –≤ —Ç–µ—Ö–∞—Å—Å–∫–∏–π —Ö–æ–ª–¥–µ–º
5. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –≤—ã–±–∏—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å—Ç—å –±–∞—É–Ω—Ç–∏, —Ä–∞–∑–º–µ—Ä–æ–º 100 —Ä—É–±. (–ò–∑ –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞)
6. –ü—Ä–∏–Ω–µ—Å—Ç–∏ —Å —Å–æ–±–æ–π —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

–£–¥–∞—á–Ω–æ–π –æ—Ö–æ—Ç—ã, –°—Ç–∞–ª–∫–µ—Ä!
'''


keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üî• –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üî•', callback_data='register')],
                                                 [InlineKeyboardButton(text='üìö –ü—Ä–∞–≤–∏–ª–∞ üìö', callback_data='rules')]])

rules_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üî• –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üî•', callback_data='register')]])
register_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üìö –ü—Ä–∞–≤–∏–ª–∞ üìö', callback_data='rules')]])


@dispatcher.message(F.text, CommandStart())
async def echo(message: Message):
    with open('/app/rosources/poker_tournament.png', 'rb') as f:
        await message.answer_photo(photo=BufferedInputFile(f.read(), filename='poker.png'), caption=start_text,
                                   parse_mode=ParseMode.HTML, reply_markup=keyboard)


@dispatcher.callback_query(F.data)
async def callback(query: CallbackQuery):
    data = query.data
    match data:
        case 'register':
            with open('/app/rosources/poker_tournament_register.png', 'rb') as f:
                user = await asyncio.to_thread(User.objects.filter(telegram_id=str(query.from_user.id)).first)
                if user:
                    await query.bot.send_photo(chat_id=query.from_user.id,
                                               photo=BufferedInputFile(f.read(), filename='poker.png'),
                                               caption='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä, –∂–¥–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π...',
                                               reply_markup=register_keyboard)
                    return
                await asyncio.to_thread(User(telegram_id=str(query.from_user.id),
                                        password='123456',
                                        username=query.from_user.username or str(query.from_user.id),
                                        first_name=query.from_user.first_name or None,
                                        last_name=query.from_user.last_name or None).save)
                await query.bot.send_photo(chat_id=query.from_user.id, photo=BufferedInputFile(f.read(), filename='poker.png'), caption='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä! –ß—É—Ç—å –ø–æ–∑–∂–µ —è —Å–æ–æ–±—â—É –≤–∞–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç—É—Ä–Ω–∏—Ä—É!', reply_markup=register_keyboard)
        case 'rules':
            with open('/app/rosources/poker_tournament_rules.png', 'rb') as f:
                await query.bot.send_photo(chat_id=query.from_user.id, photo=BufferedInputFile(f.read(), filename='poker.png'), caption=rules_text, reply_markup=rules_keyboard)
        case '0706poker_yes':
            notification = await Notification.objects.select_related('message').filter(user__telegram_id=str(query.from_user.id),
                                                                                       message__message=query.message.text).afirst()

            actions_count = await Notification.objects.filter(message__message=query.message.text,
                                                              action=Notification.ActionType.ACCEPT).acount()
            print(notification.message.max_actions > actions_count)
            if notification.message.max_actions > actions_count or notification.action == Notification.ActionType.ACCEPT:
                if notification.action != Notification.ActionType.ACCEPT:
                    await query.bot.send_message(chat_id=query.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ–∫–µ—Ä –≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É')
                    notification.action = Notification.ActionType.ACCEPT
                else:
                    await query.bot.send_message(chat_id=query.from_user.id,
                                                 text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ–∫–µ—Ä –≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É')
            else:
                await query.bot.send_message(chat_id=query.from_user.id, text='–ú—ã —É–∂–µ –Ω–∞–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')

            await notification.asave(update_fields=['action'])

        case '0706poker_no':
            notification = await Notification.objects.filter(user__telegram_id=str(query.from_user.id),
                                                             message__message=query.message.text).afirst()
            notification.action = Notification.ActionType.DECLINE
            await query.bot.send_message(chat_id=query.from_user.id,
                                         text='–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É')
            await notification.asave(update_fields=['action'])

    # try:
    #     await query.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id, reply_markup=None)
    # except Exception as e:
    #     print(e)

